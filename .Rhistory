myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
swirl()
dim(ssd)
names(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, llab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub[,10:12])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max((svd1$v))
maxCon <- which.max((svd1$v[,2]))
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)],centers = 6)
table(kClust$cluster, sub1$activity)
kmeans(sub1[,-c(562,563)],centers = 6, nstart = 100)
kClust <- kmeans(sub1[,-c(562,563)],centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust)
dim(kClust$centers)
which(kClust$size ==29)
laying <- which(kClust$size ==29)
plot(kClust$centers[laying, 1:12],pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size ==49)
plot(kClust$centers[walkdown, 1:12],pch = 19, ylab = "Walkdown")
plot(kClust$centers[walkdown, 1:12],pch = 19, ylab = "Walkdown Cluster")
install.packages("rjava")
install.packages("rJava")
library(rJava)
?matrix
height_korean <- rnorm(n=1000, mean = 170, sd = 10)
height_bushman <- rnorm(n=1000, mean = 150, sd = 8)
data.frame(height_korean, height_bushman)
height <- data.frame(height_korean, height_bushman) # 데이터 프레임 생성
rm(height_korean, height_bushman) # 벡터 삭제
head(height)
attach(height)
par( mfrow = c(1,2))
hist(height_korean, freq = TRUE, main = "한국인 키 빈도 히스토그램")
hist(height_korean, freq = FALSE, main = "한국인 키 확률밀도함수 그래프")
hist(height_bushman, freq = TRUE, main = "부시맨 키 빈도 히스토그램")
hist(height_bushman, freq = FALSE, main = "부시맨 키 확률밀도함수 그래프")
detach(height)
height <- transform(height
, z.height_korean = scale(height_korean)
, z.height_bushman = scale(height_bushman)
)
head(height)
hist(height$z.height_korean, freq=TRUE, main="standized freq. of Korean H")
hist(height$z.height_bushman, freq=TRUE, main="standized freq. of Bushman H ")
height <- height[,c(1:2)]
library(reshape)
height <- rename(height, c(height_korean = "h_kor", height_bushman = "h_bush"))
head(height)
height <- transform(height
, h_kor_01 = (h_kor - min(h_kor))/(max(h_kor) - min(h_kor)),
, h_bush_01 = (h_bush - min(h_bush))/(max(h_bush) - min(h_bush))
)
head(height)
hist(height$h_kor_01)
hist(height$h_bush_01)
hist(height$h_kor_01)
hist(height$h_kor_01)
height <- transform(height
, h_kor_01 = (h_kor - min(h_kor))/(max(h_kor) - min(h_kor))
, h_bush_01 = (h_bush - min(h_bush))/(max(h_bush) - min(h_bush))
)
hist(height$h_kor_01)
hist(height$h_bush_01)
install.packages("UsingR")
rm(list = ls())
library(UsingR)
data(cfb) # cfb 데이터 불러오기
head(cfb) # 상위 6개 미리보기
summary(cfb$INCOME) # INCOME 요약통계량
hist(cfb$INCOME, breaks=500, freq=TRUE) # INCOME 히스토그램
par( mfrow = c(1,1))
hist(cfb$INCOME, breaks=500, freq=TRUE) # INCOME 히스토그램
cfb <- transform(cfb, INCOME_log = log(INCOME + 1))
hist(cfb$INCOME_log, breaks=500, freq=TRUE)
cfb <- transform(cfb, INCOME_sqrt = sqrt(INCOME + 1))
hist(cfb$INCOME_sqrt, breaks=500, freq=TRUE)
par( mfrow = c(1,3))
qqnorm(cfb$INCOME, main="Q-Q plot of INCOME")
qqline(cfb$INCOME)
qqnorm(cfb$INCOME_log, main="Q-Q plot of INCOME_log")
qqline(cfb$INCOME_log)
qqnorm(cfb$INCOME_sqrt, main="Q-Q plot of INCOME_sqrt")
qqline(cfb$INCOME_sqrt)
par(mfrow = c(1,1))
swirl()
library(swirl)
swirl()
library(MASS)
str(Cars93)
hist(Cars93$MPG.highway)
disc_1 <- Cars93[,c("Model", "MPG.highway")]
head(disc_1)
disc_1 <- within( disc_1, {
+ MPG.highway_cd = character(0)
+ MPG.highway_cd[ MPG.highway >=20 & MPG.highway <25 ] = "20~25"
+ MPG.highway_cd[ MPG.highway >=25 & MPG.highway <30 ] = "25~30"
+ MPG.highway_cd[ MPG.highway >=30 & MPG.highway <35 ] = "30~35"
+ MPG.highway_cd[ MPG.highway >=35 & MPG.highway <40 ] = "35~40"
+ MPG.highway_cd[ MPG.highway >=40 & MPG.highway <45 ] = "40~45"
+ MPG.highway_cd[ MPG.highway >=45 & MPG.highway <=50 ] = "45~50"
+ MPG.highway_cd = factor(MPG.highway_cd,
+ level = c("20~25", "25~30", "30~35",
+ "35~40", "40~45", "45~50"))
+ })
disc_1 <- within( disc_1, {
MPG.highway_cd = character(0)
MPG.highway_cd[ MPG.highway >=20 & MPG.highway <25 ] = "20~25"
MPG.highway_cd[ MPG.highway >=25 & MPG.highway <30 ] = "25~30"
MPG.highway_cd[ MPG.highway >=30 & MPG.highway <35 ] = "30~35"
MPG.highway_cd[ MPG.highway >=35 & MPG.highway <40 ] = "35~40"
MPG.highway_cd[ MPG.highway >=40 & MPG.highway <45 ] = "40~45"
MPG.highway_cd[ MPG.highway >=45 & MPG.highway <=50 ] = "45~50"
MPG.highway_cd = factor(MPG.highway_cd,
level = c("20~25", "25~30", "30~35",
"35~40", "40~45", "45~50"))
})
disc_1
table(disc_1$MPG.highway_cd) # 분할표 생성
summary(disc_1$MPG.highway)
disc_1 <- within( disc_1, {
MPG.highway_cd2 = character(0)
MPG.highway_cd2[ MPG.highway < quantile(MPG.highway, 0.25) ] = "1Q"
MPG.highway_cd2[ MPG.highway >= quantile(MPG.highway, 0.25)
& MPG.highway < quantile(MPG.highway, 0.50) ] = "2Q"
MPG.highway_cd2[ MPG.highway >=quantile(MPG.highway, 0.50)
& MPG.highway < quantile(MPG.highway, 0.75) ] = "3Q"
MPG.highway_cd2[ MPG.highway >= quantile(MPG.highway, 0.75) ] = "4Q"
MPG.highway_cd2 = factor(MPG.highway_cd2,
level = c("1Q", "2Q", "3Q", "4Q"))
})
head(disc_1)
table(disc_1$MPG.highway_cd2)
disc_1 <- disc_1[order(disc_1$MPG.highway), ]
disc_1$N <- seq(1:length(disc_1$MPG.highway)) # 1~93까지 순서대로 1씩 증가하는 N이라는 변수 생성
disc_1
disc_1 <- within( disc_1, {
MPG.highway_cd3 = character(0)
MPG.highway_cd3[ N <= 23 ] = "1st_Freq"
MPG.highway_cd3[ N >= 24 & N <= 46 ] = "2nd_Freq"
MPG.highway_cd3[ N >= 47 & N <= 69 ] = "3rd_Freq"
MPG.highway_cd3[ N >= 70 ] = "4th_Freq"
MPG.highway_cd3 = factor(MPG.highway_cd3,
level = c("1st_Freq", "2nd_Freq", "3rd_Freq", "4th_Freq"))
})
head(disc_1)
cust_id <- c("c01", "c02", "c03", "c04", "c05", "c06", "c07")
age <- c(25, 45, 31, 30, 49, 53, 27)
cust_profile <- data.frame(cust_id, age, stringsAsFactors = F)
cust_profile
sapply(cust_profile, class)
cust_profile <- transform(cust_profile,
age_20 = ifelse(age >= 20 & age < 30, 1, 0),
age_30 = ifelse(age >= 30 & age < 40, 1, 0),
age_40 = ifelse(age >= 40 & age < 50, 1, 0),
age_50 = ifelse(age > 50 & age < 60, 1, 0))
cust_profile
Season <- c("S1", "S2", "S3", "S4", "S1", "S2", "S3", "S4")
SalesAmt <- c(300, 800, 400, 100, 280, 750, 390, 60)
TS <- data.frame(Season, SalesAmt, stringsAsFactors = F)
TS
TS <- transform(TS,
Season1 = ifelse(Season=="S1", 1, 0),
Season2 = ifelse(Season=="S2", 1, 0),
Season3 = ifelse(Season=="S3", 1, 0))
TS
sample(1:10, 5, replace = FALSE) # 비복원추출
sample(1:10, 5, replace = FALSE) # 비복원추출
sample(1:10, 5, replace = TRUE) # 복원추출
sample(1:10, 5, replace = TRUE) # 복원추출
sample(1:10, 5, replace = TRUE) # 복원추출
sample(1:10, 5, replace = FALSE) # 비복원추출
sample(1:10, 5, replace = FALSE) # 비복원추출
sample(1:10, 5, replace = FALSE) # 비복원추출
sample(1:10, 5, replace = FALSE) # 비복원추출
library(MASS)
dim(Cars93)
sim_ran_sam <- sample(1:nrow(Cars93), 5)
nrow(Cars93)
nrow(Cars93)
sample(1:nrow(Cars93), 5)
sample(1:nrow(Cars93), 5)
sample(1:nrow(Cars93), 5)
sample(1:nrow(Cars93), 5)
Cars93_srs <- Cars93[sim_ran_sam, ]
dim(Cars93_srs)
install.packages("data.table")
install.packages("sampling")
require(data.table)
require(sampling)
set.seed(1)
n <- 1000
n
d.t <- data.table(gender = rbinom(n, 1 , .5),
age = sample(1:5, n, replace=TRUE),
rebuy_yn = rbinom(n, 1, .2))
rbinom(n, 1 , .5)
sample(1:5, n, replace=TRUE)
setkey(d.t, gender, age)
d.t
d.t[ , .N, keyby = list(gender, age)]
set.seed(2)
samp <- data.table(strata(d.t, c("gender", "age"), rep(20, 10), "srswor"))
samp
View(samp)
d.t
d.t[ , .N, keyby = list(gender, age)]
samp[ , .N, keyby = list(gender, age)]
rep(20, 10)
samp
View(samp)
install.packages("rpubs")
install.packages("RPubs")
ds1$AGE <- as.factor(ds1$AGE)
ds2$AGE <- as.factor(ds2$AGE)
ds1$FLAG_INCOME <- as.factor(ds1$FLAG_INCOME)
ds2$FLAG_INCOME <- as.factor(ds2$FLAG_INCOME)
ds1$DIFFMON2 <- as.integer(ds1$DIFFMON2)
ds2$DIFFMON2 <- as.integer(ds2$DIFFMON2)
ds1$AGE <- as.factor(ds1$AGE)
ds2$AGE <- as.factor(ds2$AGE)
ds1$FLAG_INCOME <- as.factor(ds1$FLAG_INCOME)
ds2$FLAG_INCOME <- as.factor(ds2$FLAG_INCOME)
ds1$DIFFMON2 <- as.integer(ds1$DIFFMON2)
ds2$DIFFMON2 <- as.integer(ds2$DIFFMON2)
setwd("~/GitHub/Hospital")
ds1 <- read.csv("dataset1_PHENOM.csv") #병명이 식별되지 않는 그룹
ds2 <- read.csv("dataset2_PHENOM.csv") #병명이 식별되는 그룹.
library(Amelia)
missmap(ds1, col=c("yellow", "black"), legend=FALSE)
missmap(ds1, col=c("yellow", "black"), legend=FALSE)
missmap(ds1, col=c("yellow", "black"), legend=FALSE)
missmap(ds2, col=c("yellow", "black"), legend=FALSE)
ds2 <- within( ds2, {
DIAG = character(0)
DIAG[ grep("C", ds2$NewDIAG2)] = "C"
DIAG[ grep("d", ds2$NewDIAG2)] = "D"
DIAG[ grep("D", ds2$NewDIAG2)] = "D"
DIAG[ grep("E", ds2$NewDIAG2)] = "E"
DIAG[ grep("N", ds2$NewDIAG2)] = "N"
DIAG[ grep("R", ds2$NewDIAG2)] = "N" #R은 N으로 합치기
DIAG = factor(DIAG, level = c("C", "D", "E","N"))})
ds2 <- within( ds2, {
DIAG = character(0)
DIAG[ grep("C", ds2$NewDIAG2)] = "C"
DIAG[ grep("d", ds2$NewDIAG2)] = "D"
DIAG[ grep("D", ds2$NewDIAG2)] = "D"
DIAG[ grep("E", ds2$NewDIAG2)] = "E"
DIAG[ grep("N", ds2$NewDIAG2)] = "N"
DIAG[ grep("R", ds2$NewDIAG2)] = "N" #R은 N으로 합치기
DIAG = factor(DIAG, level = c("C", "D", "E","N"))})
missmap(ds1, col=c("yellow", "black"), legend=FALSE)
missmap(ds2, col=c("yellow", "black"), legend=FALSE)
rm(list=ls())
ds1 <- read.csv("dataset1_PHENOM.csv") #병명이 식별되지 않는 집단
ds2 <- read.csv("dataset2_PHENOM.csv") #병명이 식별되는 집단.
ds <- rbind(ds1, ds2)
head(ds1)
head(ds2)
library(Amelia)
missmap(ds1, col=c("yellow", "black"), legend=FALSE)
missmap(ds2, col=c("yellow", "black"), legend=FALSE)
table(ds2$NewDIAG2)
ds2 <- within( ds2, {
DIAG = character(0)
DIAG[ grep("C", ds2$NewDIAG2)] = "C"
DIAG[ grep("d", ds2$NewDIAG2)] = "D"
DIAG[ grep("D", ds2$NewDIAG2)] = "D"
DIAG[ grep("E", ds2$NewDIAG2)] = "E"
DIAG[ grep("N", ds2$NewDIAG2)] = "N"
DIAG[ grep("R", ds2$NewDIAG2)] = "N" #R은 N으로 합치기
DIAG = factor(DIAG, level = c("C", "D", "E","N"))})
table(ds2$NewDIAG2)
table(ds2$DIAG,useNA = "always")
ds2 <- within( ds2, {
DIAG = character(0)
DIAG[ grep("C", ds2$NewDIAG2)] = "C"
DIAG[ grep("d", ds2$NewDIAG2)] = "D"
DIAG[ grep("D", ds2$NewDIAG2)] = "D"
DIAG[ grep("E", ds2$NewDIAG2)] = "E"
DIAG[ grep("N", ds2$NewDIAG2)] = "N"
DIAG[ grep("R", ds2$NewDIAG2)] = "N" #R은 N으로 합치기
DIAG = factor(DIAG, level = c("C", "D", "E","N"))})
```
#데이터셋 불러오기
ds1 <- read.csv("dataset1_PHENOM.csv") #병명이 식별되지 않는 집단
ds2 <- read.csv("dataset2_PHENOM.csv") #병명이 식별되는 집단.
ds <- rbind(ds1, ds2)
head(ds1)
head(ds2)
# 2. Data Munging ---------------------------------------------------------
## map missing data by provided feature
#install.packages('Amelia')
library(Amelia)
#데이터 셋에 NA 값 확인하기
missmap(ds1, col=c("yellow", "black"), legend=FALSE)
missmap(ds2, col=c("yellow", "black"), legend=FALSE)
#잘못들어간 데이터 제거
ds1 <- subset(ds1, !is.na(Seq))
ds2 <- subset(ds2, !is.na(Seq))
#데이터형식 변경
str(ds1)
str(ds2)
ds1$AGE <- as.factor(ds1$AGE)
ds2$AGE <- as.factor(ds2$AGE)
#예측하고자 하는 변수는 문자열 범주명으로 바꾼다.
#train함수로 모델 생성시 숫자형 범주 명은 오류
ds1$FLAG_REACT[ds1$FLAG_REACT ==0] <- "NO"
ds1$FLAG_REACT[ds1$FLAG_REACT ==1] <- "YES"
ds2$FLAG_REACT[ds2$FLAG_REACT ==0] <- "NO"
ds2$FLAG_REACT[ds2$FLAG_REACT ==1] <- "YES"
ds1$FLAG_REACT <- as.factor(ds1$FLAG_REACT)
ds2$FLAG_REACT <- as.factor(ds2$FLAG_REACT)
ds1$FLAG_INCOME <- as.factor(ds1$FLAG_INCOME)
ds2$FLAG_INCOME <- as.factor(ds2$FLAG_INCOME)
ds1$DIFFMON2 <- as.integer(ds1$DIFFMON2)
ds2$DIFFMON2 <- as.integer(ds2$DIFFMON2)
#병명 업데이트
table(ds2$NewDIAG2)
ds2 <- within( ds2, {
DIAG = character(0)
DIAG[ grep("C", ds2$NewDIAG2)] = "C"
DIAG[ grep("d", ds2$NewDIAG2)] = "D"
DIAG[ grep("D", ds2$NewDIAG2)] = "D"
DIAG[ grep("E", ds2$NewDIAG2)] = "E"
DIAG[ grep("N", ds2$NewDIAG2)] = "N"
DIAG[ grep("R", ds2$NewDIAG2)] = "N" #R은 N으로 합치기
DIAG = factor(DIAG, level = c("C", "D", "E","N"))})
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
setwd("~/GitHub/Hospital")
ds1 <- read.csv("dataset1_PHENOM.csv") #병명이 식별되지 않는 그룹
ds2 <- read.csv("dataset2_PHENOM.csv") #병명이 식별되는 그룹.
# Chunk 3
library(Amelia)
# Chunk 4
missmap(ds1, col=c("yellow", "black"), legend=FALSE)
# Chunk 5: 병명이 식별된 그룹
missmap(ds2, col=c("yellow", "black"), legend=FALSE)
# Chunk 6
ds1 <- subset(ds1, !is.na(ds1$Seq))
ds2 <- subset(ds2, !is.na(ds1$Seq))
# Chunk 7
ds1$AGE <- as.factor(ds1$AGE)
ds2$AGE <- as.factor(ds2$AGE)
ds1$FLAG_INCOME <- as.factor(ds1$FLAG_INCOME)
ds2$FLAG_INCOME <- as.factor(ds2$FLAG_INCOME)
ds1$DIFFMON2 <- as.integer(ds1$DIFFMON2)
ds2$DIFFMON2 <- as.integer(ds2$DIFFMON2)
# Chunk 8
ds1$FLAG_REACT[ds1$FLAG_REACT ==0] <- "NO"
ds1$FLAG_REACT[ds1$FLAG_REACT ==1] <- "YES"
ds2$FLAG_REACT[ds2$FLAG_REACT ==0] <- "NO"
ds2$FLAG_REACT[ds2$FLAG_REACT ==1] <- "YES"
ds1$FLAG_REACT <- as.factor(ds1$FLAG_REACT)
ds2$FLAG_REACT <- as.factor(ds2$FLAG_REACT)
# Chunk 9
table(ds2$NewDIAG2)
# Chunk 10
ds2 <- within( ds2, {
DIAG = character(0)
DIAG[ grep("C", ds2$NewDIAG2)] = "C"
DIAG[ grep("d", ds2$NewDIAG2)] = "D"
DIAG[ grep("D", ds2$NewDIAG2)] = "D"
DIAG[ grep("E", ds2$NewDIAG2)] = "E"
DIAG[ grep("N", ds2$NewDIAG2)] = "N"
DIAG[ grep("R", ds2$NewDIAG2)] = "N" #R은 N으로 합치기
DIAG = factor(DIAG, level = c("C", "D", "E","N"))})
# Chunk 11
table(ds2$DIAG,useNA = "always")
# Chunk 12
ds1 <- within( ds1, {
DIFFMON1_CD = character(0)
DIFFMON1_CD[ DIFFMON1 >=0 & DIFFMON1 <4 ] = "SEND1"
DIFFMON1_CD[ DIFFMON1 >=4 & DIFFMON1 <8 ] = "SEND2"
DIFFMON1_CD[ DIFFMON1 >=8 ] = "SEND3"
DIFFMON1_CD = factor(DIFFMON1_CD, level = c("SEND1", "SEND2", "SEND3"))})
ds2 <- within( ds2, {
DIFFMON1_CD = character(0)
DIFFMON1_CD[ DIFFMON1 >=0 & DIFFMON1 <4 ] = "SEND1"
DIFFMON1_CD[ DIFFMON1 >=4 & DIFFMON1 <8 ] = "SEND2"
DIFFMON1_CD[ DIFFMON1 >=8 ] = "SEND3"
DIFFMON1_CD = factor(DIFFMON1_CD, level = c("SEND1", "SEND2", "SEND3"))})
# Chunk 13
mosaicplot(ds1$DIFFMON1_CD ~ ds1$FLAG_REACT,
main="React by Sending Duration", shade=FALSE,
color=TRUE, xlab="Sending Duration", ylab="REACT")
mosaicplot(ds2$DIFFMON1_CD ~ ds2$FLAG_REACT,
main="React by Sending Duration", shade=FALSE,
color=TRUE, xlab="Sending Duration", ylab="REACT")
# Chunk 14
ds1 <- within( ds1, {
DIFFMON2_CD = character(0)
DIFFMON2_CD[ DIFFMON2 >=0 & DIFFMON2 <3 ] = "REACT1"
DIFFMON2_CD[ DIFFMON2 >=3 ] = "REACT2"
DIFFMON2_CD[ is.na(DIFFMON2) ] = "NO_REACT"
DIFFMON2_CD = factor(DIFFMON2_CD, level = c("REACT1", "REACT2", "NO_REACT"))})
ds2 <- within( ds2, {
DIFFMON2_CD = character(0)
DIFFMON2_CD[ DIFFMON2 >=0 & DIFFMON2 <3 ] = "REACT1"
DIFFMON2_CD[ DIFFMON2 >=3 ] = "REACT2"
DIFFMON2_CD[ is.na(DIFFMON2) ] = "NO_REACT"
DIFFMON2_CD = factor(DIFFMON2_CD, level = c("REACT1", "REACT2", "NO_REACT"))})
table(ds1$DIFFMON2_CD)
table(ds2$DIFFMON2_CD)
ds <- rbind(ds1, ds2) #병명과 상관없는 전체 데이터
# Chunk 15
set.seed(10)
sub1 <- sample(nrow(ds1), floor(nrow(ds1) * 0.8))
ds1_train0 <- ds1[sub1, ]
ds1_test0 <- ds1[-sub1, ]
sub2 <- sample(nrow(ds2), floor(nrow(ds2) * 0.8))
ds2_train0 <- ds2[sub2, ]
ds2_test0 <- ds2[-sub2, ]
sub3 <- sample(nrow(ds), floor(nrow(ds) * 0.8))
ds_train0 <- ds[sub, ]
ds_test0 <- ds[-sub, ]
# Chunk 16
nrow(ds1_train0)
nrow(ds1_test0)
nrow(ds2_train0)
nrow(ds2_test0)
nrow(ds_train0)
nrow(ds_test0)
# Chunk 17
library(caret)
library(e1071)
library(pROC)
library(ada)
# Chunk 18
cv.ctrl <- trainControl(method = "repeatedcv", repeats = 3,
summaryFunction = twoClassSummary,classProbs = TRUE)
tune.1.1 <- train(FLAG_REACT ~ DIFFMON1_CD + CASE + AGE,
data = ds1_train0, method = "glm",
metric = "ROC",  trControl = cv.ctrl)
# 적용
Prediction <- predict(tune.1.1, ds1_test0)
#정확도 계산
submit <- data.frame(Seq = ds1_test0$Seq, PREDICT_REACT = Prediction)
result <- merge(ds1_test0, submit, by = "Seq")
nrow(result[result$FLAG_REACT == result$PREDICT_REACT,]) / nrow(result)
# Chunk 19
## note the dot preceding each variable
ada.grid <- expand.grid(.iter = c(50, 100), .maxdepth = c(4, 8), .nu = c(0.1, 1))
##Specify method=”ada” and tuneGrid=ada.grid in train, and away we go...
ada.tune <- train(FLAG_REACT ~ DIFFMON1_CD + CASE + AGE, data = ds1_train0,
method = "ada", metric = "ROC", tuneGrid = ada.grid,
trControl = cv.ctrl)
nrow(ds2)
length(ds2$NewDIAG2)
ds1 <- read.csv("dataset1_PHENOM.csv") #병명이 식별되지 않는 집단
ds2 <- read.csv("dataset2_PHENOM.csv") #병명이 식별되는 집단.
nrow(ds1)
nrow(ds2)
ds1 <- subset(ds1, !is.na(Seq))
ds2 <- subset(ds2, !is.na(Seq))
ds1$AGE <- as.factor(ds1$AGE)
ds2$AGE <- as.factor(ds2$AGE)
#예측하고자 하는 변수는 문자열 범주명으로 바꾼다.
#train함수로 모델 생성시 숫자형 범주 명은 오류
ds1$FLAG_REACT[ds1$FLAG_REACT ==0] <- "NO"
ds1$FLAG_REACT[ds1$FLAG_REACT ==1] <- "YES"
ds2$FLAG_REACT[ds2$FLAG_REACT ==0] <- "NO"
ds2$FLAG_REACT[ds2$FLAG_REACT ==1] <- "YES"
ds1$FLAG_REACT <- as.factor(ds1$FLAG_REACT)
ds2$FLAG_REACT <- as.factor(ds2$FLAG_REACT)
ds1$FLAG_INCOME <- as.factor(ds1$FLAG_INCOME)
ds2$FLAG_INCOME <- as.factor(ds2$FLAG_INCOME)
ds1$DIFFMON2 <- as.integer(ds1$DIFFMON2)
ds2$DIFFMON2 <- as.integer(ds2$DIFFMON2)
ds2 <- within( ds2, {
DIAG = character(0)
DIAG[ grep("C", ds2$NewDIAG2)] = "C"
DIAG[ grep("d", ds2$NewDIAG2)] = "D"
DIAG[ grep("D", ds2$NewDIAG2)] = "D"
DIAG[ grep("E", ds2$NewDIAG2)] = "E"
DIAG[ grep("N", ds2$NewDIAG2)] = "N"
DIAG[ grep("R", ds2$NewDIAG2)] = "N" #R은 N으로 합치기
DIAG = factor(DIAG, level = c("C", "D", "E","N"))})
nrow(ds2)
nrow(ds2)
ds2
ds1
rm(list=ls())
